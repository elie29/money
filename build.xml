<?xml version="1.0" encoding="UTF-8"?>
<project name="Money" default="build">

   <!-- Use this when the tools are managed by Composer in ${basedir}/vendor/bin add .bat for windows -->
   <property name="phploc" value="${basedir}/vendor/bin/phploc.bat" />
   <property name="pdepend" value="${basedir}/vendor/bin/pdepend.bat" />
   <property name="phpmd" value="${basedir}/vendor/bin/phpmd.bat" />
   <property name="phpcs" value="${basedir}/vendor/bin/phpcs.bat" />
   <property name="phpcpd" value="${basedir}/vendor/bin/phpcpd.bat" />
   <property name="phpunit" value="${basedir}/vendor/bin/phpunit.bat" />
   <property name="phpdox" value="${basedir}/vendor/bin/phpdox.bat" />
   <property name="phpcb" value="${basedir}/vendor/bin/phpcb.bat" />

   <target name="build" depends="static-analysis,phpunit,phpdox,phpcb,-check-failure" description="Performs static analysis, runs the tests, and generates project documentation" />

   <target name="quick-build" depends="lint,phpunit-no-coverage" description="Performs a lint check and runs the tests (without generating code coverage reports)" />

   <target name="static-analysis" depends="lint,pdepend,phploc-ci,phpmd-ci,phpcs-ci,phpcpd-ci" description="Performs static analysis" />

   <target name="clean" unless="clean.done" description="Cleanup build artifacts">
      <delete dir="${basedir}/build/coverage" />
      <delete dir="${basedir}/build/logs" />
      <delete dir="${basedir}/build/pdepend" />
      <delete dir="${basedir}/build/phpcb" />
      <!-- Leave phpdocx/cache folder -->
      <delete dir="${basedir}/build/phpdox/html" />
      <delete dir="${basedir}/build/phpdox/xml" />

      <property name="clean.done" value="true" />
   </target>

   <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
      <mkdir dir="${basedir}/build/coverage" />
      <mkdir dir="${basedir}/build/logs" />
      <mkdir dir="${basedir}/build/pdepend" />
      <mkdir dir="${basedir}/build/phpcb" />
      <mkdir dir="${basedir}/build/phpdox" />

      <property name="prepare.done" value="true" />
   </target>

   <target name="generate-code" unless="generate-code.done" description="Generate Currency-specific subclasses of Money and autoloader code">
      <exec executable="php" taskname="generate-code">
         <arg value="${basedir}/build/generate-child-classes.php" />
      </exec>

      <exec executable="php" taskname="generate-code">
         <arg value="${basedir}/build/tools/phpab.phar" />
         <arg value="--output" />
         <arg path="src/autoload.php" />
         <arg path="src" />
      </exec>
      <property name="generate-code.done" value="true" />
   </target>

   <target name="lint" depends="prepare" unless="lint.done" description="Check all php classes are valid">
      <apply executable="php" failonerror="true" taskname="lint">
         <arg value="-l" />

         <fileset dir="${basedir}/src">
            <include name="**/*.php" />
            <modified />
         </fileset>

         <fileset dir="${basedir}/tests">
            <include name="**/*.php" />
            <modified />
         </fileset>
      </apply>
      <delete file="cache.properties" quiet="true" />
      <property name="lint.done" value="true" />
   </target>

   <target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
      <exec executable="${phploc}" taskname="phploc">
         <arg value="--count-tests" />
         <arg path="${basedir}/src" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phploc.done" value="true" />
   </target>

   <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${phploc}" taskname="phploc">
         <arg value="--count-tests" />
         <arg value="--log-csv" />
         <arg path="${basedir}/build/logs/phploc.csv" />
         <arg value="--log-xml" />
         <arg path="${basedir}/build/logs/phploc.xml" />
         <arg path="${basedir}/src" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phploc.done" value="true" />
   </target>

   <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${pdepend}" taskname="pdepend">
         <arg value="--jdepend-xml=${basedir}/build/logs/pdepend.xml" />
         <!-- summary.xml is not needed for jenkins -->
         <arg value="--summary-xml=${basedir}/build/logs/summary.xml" />
         <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
         <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
         <arg path="${basedir}/src" />
      </exec>

      <property name="pdepend.done" value="true" />
   </target>

   <target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
      <exec executable="${phpmd}" taskname="phpmd">
         <arg path="${basedir}/src" />
         <arg value="text" />
         <arg path="${basedir}/build/phpmd.xml" />
      </exec>

      <property name="phpmd.done" value="true" />
   </target>

   <target name="phpmd-ci" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format">
      <exec executable="${phpmd}" taskname="phpmd">
         <arg path="${basedir}/src" />
         <arg value="xml" />
         <arg path="${basedir}/build/phpmd.xml" />
         <arg value="--reportfile" />
         <arg path="${basedir}/build/logs/pmd.xml" />
      </exec>
   </target>

   <target name="phpcs" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
      <exec executable="${phpcs}" taskname="phpcs">
         <arg value="--standard=PSR2" />
         <arg value="--extensions=php" />
         <arg value="--ignore=autoload.php" />
         <arg path="${basedir}/src" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phpcs.done" value="true" />
   </target>

   <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
         <arg value="--report=checkstyle" />
         <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
         <arg value="--standard=PSR2" />
         <arg value="--extensions=php" />
         <arg value="--ignore=autoload.php" />
         <arg path="${basedir}/src" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phpcs.done" value="true" />
   </target>

   <target name="phpcpd" unless="phpcpd.done" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
      <exec executable="${phpcpd}" taskname="phpcpd">
         <arg path="${basedir}/src" />
      </exec>

      <property name="phpcpd.done" value="true" />
   </target>

   <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
      <exec executable="${phpcpd}" taskname="phpcpd">
         <arg value="--log-pmd" />
         <arg path="${basedir}/build/logs/pmd-cpd.xml" />
         <arg path="${basedir}/src" />
      </exec>

      <property name="phpcpd.done" value="true" />
   </target>

   <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
      <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
         <arg value="--configuration" />
         <arg path="${basedir}/build/phpunit.xml" />
         <arg path="${basedir}/tests" />
      </exec>

      <property name="phpunit.done" value="true" />
   </target>

   <target name="phpunit-no-coverage" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit (without generating code coverage reports)">
      <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
         <arg value="--configuration" />
         <arg path="${basedir}/build/phpunit.xml" />
         <arg value="--no-coverage" />
         <arg path="${basedir}/tests/unit" />
      </exec>

      <property name="phpunit.done" value="true" />
   </target>

   <target name="phpdox" unless="phpdox.done" depends="phpcs-ci,phpmd-ci,phploc-ci,phpunit" description="Generate project documentation using phpDox">
      <exec executable="${phpdox}" taskname="phpdox">
         <arg value="-f" />
         <arg path="${basedir}/build/phpdox.xml" />
      </exec>

      <property name="phpdox.done" value="true" />
   </target>

   <target name="phpcb" unless="phpcb.done" depends="prepare" description="Generate a code browser using phpcb">
      <exec executable="${phpcb}" taskname="phpcb">
         <arg line="--log ${basedir}/build/logs
                    --output ${basedir}/build/phpcb
                    --source ${basedir}/src" />
      </exec>

      <property name="phpcb.done" value="true" />
   </target>

   <target name="-check-failure">
      <fail message="PHPUnit did not finish successfully">
         <condition>
            <not>
               <equals arg1="${result.phpunit}" arg2="0" />
            </not>
         </condition>
      </fail>
   </target>
</project>
